write: ~~~ process.stdout.write(stack[wort.ind] + ''); ~~~ ;

writep: test.write zap ;

testBooleans:
    "\n### testing booleans" printp
    true printp false printp ;

testNumbers:
    "\n### testing numbers" printp
    1 printp 2.56789 printp -100 printp ;

testStrings:
    "\n### testing strings ###" printp
    "hello, wort!" printp "escape\tsequences!\n" printp ;

testQuotation:
    "\n### testing quotations ###" printp
    [ 1 2 3 4 printp "a string" printp [5 67 -8] ] printp ;

testObject:
    "\n### testing object literals ###" printp
    { cool: 3, hello: 'hello' } printp [ {obj: 1, nested:{}} ] printp ;

testPop:
    "\n### testing zap ###" printp
    1 2 printp printp
    3 printp ;

testDup:
    "\n### testing dup ###" printp
    3 dup printp printp ;

testSwap:
    "\n### testing swap ###" printp
    3 print 4 print swap printp printp ;

testCat:
    "\n### testing cat ###" printp
    [1 2] print [3 4] print cat printp;

testCons:
    "\n### testing cons ###" printp
    [1 2] [3] cons printp ;

testUnit:
    "\n### testing unit ###" printp
    3 unit printp ;

testI:
    "\n### testing i ###" printp
    [3 printp] print i ;

testDip:
    "\n### testing dip ###" printp
    5 4 [printp] dip printp ;

testAdd:
    "\n### testing addition ###" printp
    4 test.write "+" test.writep 5 test.write "=" test.writep + print ;

testSub:
    "\n### testing subtraction ###" printp
    4 test.write "-" test.writep 5 test.write "=" test.writep - print ;

testMul:
    "\n### testing multiplication ###" printp
    4 test.write "*" test.writep 5 test.write "=" test.writep * print ;

testDiv:
    "\n### testing division ###" printp
    4 test.write "/" test.writep 5 test.write "=" test.writep / print ;

testRem:
    "\n### testing rem ###" printp
    4 test.write "%" test.writep 5 test.write "=" test.writep % print ;

testInc:
    "\n### testing increment ###" printp
    1 ++ printp ;

testDec:
    "\n### testing decrement ###" printp
    2 -- printp ;

testNeg:
    "\n### testing negation ###" printp
    3 neg printp ;

testComplement:
    "\n### testing complement ###" printp
    4 ~ printp ;

testBitwiseAnd:
    "\n### testing bitwise AND ###" printp
    5 1 & printp ;

testBitwiseOr:
    "\n### testing bitwise OR ###" printp
    4 2 | printp ;

testBitwiseXor:
    "\n### testing bitwise XOR ###" printp
    2 2 ^ printp ;

testShiftLeft:
    "\n### testing shift left ###" printp
    2 1 << printp ;

testShiftRight:
    "\n### testing shift right ###" printp
    2 1 >> printp -2 1 >> printp ;

testShiftRightUnsigned:
    "\n### testing shift right unsigned ###" printp
    2 1 >>> printp -2 1 >>> printp ;

testAnd:
    "\n### testing boolean and ###" printp
    true false && printp true true && printp ;

testOr:
    "\n### testing boolean or ###" printp
    true false || printp false false || printp ;

testSame:
    "\n### testing same ###" printp
    true false = printp 3 "3" = printp ;

testNotSame:
    "\n### testing not same ###" printp
    true false != printp 3 "3" != printp ;

testEq:
    "\n### testing eq ###" printp
    3 3 == printp 3 "3" == printp ;

testNotEq:
    "\n### testing not eq ###" printp
    true false !== printp 3 "3" !== printp ;

testLess:
    "\n### testing less ###" printp
    1 2 < printp 4 3 < printp ;

testLessEq:
    "\n### testing lesseq ###" printp
    1 2 <= printp 4 4 <= printp ;

testGreater:
    "\n### testing greater ###" printp
    2 1 > printp 3 4 > printp ;

testGreaterEq:
    "\n### testing greatereq ###" printp
    2 1 >= printp 4 4 >= printp ;

testSetLeft:
    "\n### testing set left ###" printp
    {} 2 "hello" <- printp
    {} 2 <-hello printp ;

testSetRight:
    "\n### testing set right ###" printp
    2 {} "hello" -> printp
    2 {} ->hello printp ;

testGet:
    "\n### testing get ###" printp
    {hello:2} "hello" @ printp
    {hello:2} @hello printp ;

testIsNull:
    "\n### testing null? ###" printp
    null print null? printp ;

testTypeof:
    "\n### testing typeof ###" printp
    3 typeof printp "hello" typeof printp ;

testInlineJs:
    ~~~
    console.log("\n### testing inline js ###");
    console.log("why hello there~ I'm some inline javascript");
    console.log(1+2);
    ~~~ ;

main:
    # test data types
    test.testBooleans
    test.testNumbers
    test.testStrings
    test.testQuotation
    test.testObject

    # test Kerby's basic combinators
    test.testPop
    test.testDup
    test.testSwap
    test.testCat
    test.testCons
    test.testUnit
    test.testI
    test.testDip

    # test basic operations
    test.testAdd
    test.testSub
    test.testMul
    test.testDiv
    test.testRem
    test.testInc
    test.testDec
    test.testNeg

    # test bitwise operators
    test.testComplement
    test.testBitwiseAnd
    test.testBitwiseOr
    test.testBitwiseXor
    test.testShiftLeft
    test.testShiftRight
    test.testShiftRightUnsigned

    # test logical operators
    test.testAnd
    test.testOr

    # test comparison operators
    test.testSame
    test.testNotSame
    test.testEq
    test.testNotEq
    test.testLess
    test.testLessEq
    test.testGreater
    test.testGreaterEq

    # test object access operators
    test.testSetLeft
    test.testSetRight
    test.testGet

    # test questions
    test.testIsNull
    test.testTypeof

    test.testInlineJs ;
